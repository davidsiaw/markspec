#!/usr/bin/env ruby

require 'markspec'
require 'fileutils'
require 'yaml'

files = [ARGV[0]]
files = Dir['spec/**/*.md'] if files.first.nil?

CUTTER_REGEX = /^(?<front>(```|~~~)[a-z0-9]+).+/.freeze

def preprocess_file(file)
  contents = File.read file

  contexts = []
  blocks = []

  lines = contents.split "\n"
  inside_type = false
  current_block = []

  nlines = lines.map do |line|
    # if inside_type
    #   puts "#{inside_type} #{line}"
    # else
    #   puts "    #{line}"
    # end

    if line[0..2] == inside_type
      inside_type = false
      blocks << current_block.join("\n")
      current_block = []
    else
      current_block << line if inside_type
    end

    if !inside_type
      line.gsub(CUTTER_REGEX) do |m|
        contexts << m
        matched = CUTTER_REGEX.match(m)
        inside_type = matched[:front][0..2]

        matched[:front]
      end
    else
      line
    end
  end

  { raw: nlines.join("\n"), contexts: contexts, blocks: blocks }
end

# a test case
class TestCase
  def initialize(cmds)
    @expectations = []
    @prep = []
    @commands = []
    @cmds = cmds
    parse!
  end

  def pass?
    execute!

    @result ? true : false
  end

  private

  def execute!
    @prep.each do |info|
      File.write(info[:file], info[:content])
    end

    output = ''
    @commands.each do |block|
      begin
        output = `#{block}`
      rescue StandardError => e
      end
    end

    @result = true

    @expectations.each do |info|
      @result &&= case info[:thing]
                  when /^file:(.+)/
                    File.read($1).chomp == info[:content].chomp
                  when 'stdout'
                    output.chomp == info[:content].chomp
                  end
    end

    nil
  end

  def parse!
    @cmds.each do |annotation, block|
      x = CUTTER_REGEX.match(annotation)
      command = annotation.sub(/^#{x[:front]}\s+/, '')

      case command
      when /^file:(.+)/
        @prep << { file: $1, content: block }
      when /^command/
        @commands << block
      when /^expected (.+)/
        @expectations << { thing: $1, content: block || '' }
      end
    end
  end
end

files.each do |file|
  info = preprocess_file file
  cmds = info[:contexts].zip(info[:blocks])
  print "Test: #{file} - "
  tc = TestCase.new(cmds)
  if tc.pass?
    puts 'pass'
  else
    puts 'fail'
  end
end
