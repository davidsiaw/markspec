#!/usr/bin/env ruby

require 'markspec'
require 'fileutils'
require 'yaml'
require 'open3'
require 'colorize'

files = [ARGV[0]]
files = Dir['spec/**/*.md'] if files.first.nil?

CUTTER_REGEX = /^(?<front>(```|~~~)[a-z0-9]+).+/.freeze

def preprocess_file(file)
  contents = File.read file

  contexts = []
  blocks = []

  lines = contents.split "\n"
  inside_type = false
  current_block = []

  nlines = lines.map do |line|
    # if inside_type
    #   puts "#{inside_type} #{line}"
    # else
    #   puts "    #{line}"
    # end

    if line[0..2] == inside_type
      inside_type = false
      blocks << current_block.join("\n")
      current_block = []
    elsif inside_type
      current_block << line
    end

    if !inside_type
      line.gsub(CUTTER_REGEX) do |m|
        contexts << m
        matched = CUTTER_REGEX.match(m)
        inside_type = matched[:front][0..2]

        matched[:front]
      end
    else
      line
    end
  end

  { raw: nlines.join("\n"), contexts: contexts, blocks: blocks }
end

# a test case
class TestCase
  attr_reader :expected, :matcher, :exception, :file, :results_list

  def initialize(cmds, file)
    @file = file
    @prep = []
    @commands = []
    @cmds = cmds
    @results_list = []
    parse!
  end

  def pass?
    @pass ||= begin
      execute!
      @result ? true : false
    end
  end

  private

  def execute!
    tempfiles = []

    @prep.each do |info|
      File.write(info[:file], info[:content])
      tempfiles << { temp: info[:file] }
    end

    actually_execute!

    tempfiles.each do |info|
      FileUtils.rm info[:temp]
    end
  end

  def actually_execute!

    @result = true

    stdout = ''
    stderr = ''
    status = ''

    @commands.each_with_index do |cmd, index|
      begin
        if cmd[:kind] == :command
          block = cmd[:block]
          stdout, stderr, status = Open3.capture3(block)

        elsif cmd[:kind] == :expectation
          matched_result = case cmd[:thing]
                           when /^file:(.+)(:)?/
                             File.read(Regexp.last_match(1)).chomp
                           when 'stdout'
                             stdout
                           when 'stderr'
                             stderr
                           when 'exitcode'
                             status.exitstatus.to_s
                           end

          this_result = case cmd[:type]
                        when 'binary'
                          chars = cmd[:content]
                                  .split(/\s+/)
                                  .map { |x| x.to_i(16) }

                          exp_chars = matched_result.chars.map(&:ord)

                          @expected = exp_chars.inspect
                          @matcher = chars.inspect

                          if chars.length != exp_chars.length
                            false
                          else
                            exp_chars == chars
                          end
                        when 'regex'
                          @expected = Regexp.new(cmd[:content].chomp.uncolorize).inspect
                          @matcher = matched_result.inspect

                          Regexp.new(cmd[:content].chomp.uncolorize) =~ matched_result
                        else
                          @expected = cmd[:content].inspect
                          @matcher = matched_result.chomp.uncolorize.inspect

                          matched_result.chomp.uncolorize == cmd[:content].chomp
                        end

          @results_list << {
            pass: this_result,
            index: index,
            file: file
          }
          @result &&= this_result
        end
      rescue StandardError => _e
        @result = false
      end
    end

    nil
  end

  def parse!
    @cmds.each do |annotation, block|
      x = CUTTER_REGEX.match(annotation)
      command = annotation.sub(/^#{x[:front]}\s+/, '')

      case command
      when /^file:(.+)/
        @prep << { file: Regexp.last_match(1), content: block }
      when /^command/
        @commands << {
          kind: :command,
          block: block
        }
      when /^expected (.+)/
        @commands << {
          kind: :expectation,
          thing: Regexp.last_match(1),
          content: block || '',
          type: x[:front][3..-1]
        }
      end
    end
  end
end

failcases = []
files.each do |file|
  info = preprocess_file file
  cmds = info[:contexts].zip(info[:blocks])
  print "Test: #{file} - "
  tc = TestCase.new(cmds, file)
  failcases << tc unless tc.pass?
  if tc.results_list.length.nonzero?
    puts(tc.results_list.map { |x| x[:pass] ? 'pass'.green : 'fail'.red }.join(' '))
  else
    puts 'none'.yellow
  end
end

if failcases.length.nonzero?
  STDERR.puts "Failures detected: #{failcases.length} cases"
  failcases.each_with_index do |c, i|
    STDERR.puts
    STDERR.puts "#{i+1}. bundle exec markspec #{c.file}"
    STDERR.puts "    expected: #{c.expected}"
    STDERR.puts "         got: #{c.matcher}"
  end
end
